name: Deploy Laravel para public_html via FTP

on:
  push:
    branches:
    - main

jobs:
  test:
    name: Executar Testes
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Obter código mais recente
      uses: actions/checkout@v4

    - name: 🐘 Cache do Composer
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}

    - name: 📦 Instalar dependências do Composer
      run: composer install --prefer-dist --no-interaction --no-scripts

    - name: 🛠️ Configurar ambiente de teste
      run: cp .env.example .env && php artisan key:generate

    - name: 📦 Instalar PHPUnit
      run: composer require --dev phpunit/phpunit

    - name: 🧪 Rodar testes
      run: ./vendor/bin/phpunit

  deploy:
    name: Deploy Otimizado
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Obter código mais recente
      uses: actions/checkout@v4

    - name: 🐘 Cache do Composer
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}

    # Verifica se o projeto usa Node.js
    - name: 🌀 Verificar se o projeto usa Node.js
      id: check-node
      run: |
        if [ -f "package.json" ]; then
          echo "Node.js detectado! Instalando dependências..."
          echo "uses_node=true" >> "$GITHUB_ENV"
        else
          echo "Node.js não detectado. Pulando etapas relacionadas."
          echo "uses_node=false" >> "$GITHUB_ENV"
        fi

    # Verifica se há necessidade de compilar assets (Vite/Webpack)
    - name: 🔍 Verificar se o projeto precisa de build de assets
      if: env.uses_node == 'true'
      run: |
        if [[ -f "vite.config.js" || -f "webpack.mix.js" ]]; then
          echo "build_assets=true" >> "$GITHUB_ENV"
        else
          echo "build_assets=false" >> "$GITHUB_ENV"
        fi

    # Configura o Node.js apenas se o projeto usar npm
    - name: 🔄 Configurar Node.js
      if: env.uses_node == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: npm

    # Instala dependências do npm apenas se o projeto usa Node.js
    - name: 📦 Instalar dependências do NPM (CI)
      if: env.uses_node == 'true'
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci --prefer-offline
        else
          npm install --prefer-offline
        fi

    # Compila assets apenas se o projeto precisar de build de assets
    - name: 🔨 Compilar assets (Otimizado)
      if: env.uses_node == 'true' && env.build_assets == 'true'
      run: npm run prod

    - name: 📂 Enviar arquivos via FTP (Otimizado)
      uses: SamKirkland/FTP-Deploy-Action@4.3.0
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USER }}
        password: ${{ secrets.FTP_PASSWORD }}
        server-dir: ${{ secrets.HOSTGATOR_DEPLOY_DIR }}
        local-dir: ./
        exclude: |
          **/.git*
          **/.env*
          **/tests/*
          **/storage/logs/*
          **/storage/framework/cache/*
          **/storage/framework/sessions/*
          **/storage/framework/views/*
          **/bootstrap/cache/*.php

    - name: 🚀 Configuração Rápida no Servidor
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER }} >> ~/.ssh/known_hosts

        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SERVER }} << 'EOF'
          cd ${{ secrets.HOSTGATOR_DEPLOY_DIR }}

          # Otimização: Usar cache do Composer
          composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

          # Otimização: Configuração rápida
          php artisan storage:link
          php artisan optimize:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Atualizar permissões apenas se necessário
          [ ! -d storage ] && mkdir -p storage
          chmod -R 775 storage bootstrap/cache
        EOF
